# Filename: DetectAndRespondToPloutus.ps1

# Define known IoCs for Ploutus ATM Malware
$maliciousProcesses = @("Ploutos.exe", "MaliciousProcessName.exe")
$maliciousFiles = @("C:\Windows\System32\ploutus.dll", "C:\ProgramData\malware.exe")
$maliciousRegistryKeys = @("HKLM:\SOFTWARE\MaliciousKey", "HKCU:\Software\MaliciousKey")
$maliciousSHA256 = @("d99339d3dc6891cdd832754c5739640c62cd229c84e04e9e3cad743c6f66b1b9")
$maliciousFileNames = @("Ploutos.exe", "Backdoor.Ploutus.B")

# Function to compute SHA256 hash of a file
function Get-FileHashSHA256 {
    param (
        [string]$filePath
    )
    try {
        if (Test-Path $filePath) {
            $fileStream = [System.IO.File]::OpenRead($filePath)
            $sha256 = [System.Security.Cryptography.SHA256]::Create()
            $hashBytes = $sha256.ComputeHash($fileStream)
            return [BitConverter]::ToString($hashBytes) -replace '-', ''
        }
    } catch {
        Log-DetectionResponse "Error computing hash for $filePath: $_.Exception.Message"
    } finally {
        if ($fileStream) { $fileStream.Close() }
    }
    return $null
}

# Function to stop malicious processes
function Stop-MaliciousProcess {
    param (
        [string]$processName
    )
    try {
        $process = Get-Process -Name $processName -ErrorAction SilentlyContinue
        if ($process) {
            Write-Output "Stopping malicious process: $processName"
            Stop-Process -Id $process.Id -Force
            Log-DetectionResponse "Stopped malicious process: $processName"
        }
    } catch {
        Log-DetectionResponse "Error stopping process $processName: $_.Exception.Message"
    }
}

# Function to remove malicious files
function Remove-MaliciousFile {
    param (
        [string]$filePath
    )
    try {
        if (Test-Path $filePath) {
            Write-Output "Removing malicious file: $filePath"
            Remove-Item $filePath -Force
            Log-DetectionResponse "Removed malicious file: $filePath"
        }
    } catch {
        Log-DetectionResponse "Error removing file $filePath: $_.Exception.Message"
    }
}

# Function to remove malicious registry keys
function Remove-MaliciousRegistryKey {
    param (
        [string]$regKey
    )
    try {
        if (Test-Path $regKey) {
            Write-Output "Removing malicious registry key: $regKey"
            Remove-Item $regKey -Recurse -Force
            Log-DetectionResponse "Removed malicious registry key: $regKey"
        }
    } catch {
        Log-DetectionResponse "Error removing registry key $regKey: $_.Exception.Message"
    }
}

# Function to log the detection and response actions
function Log-DetectionResponse {
    param (
        [string]$message
    )
    $logFilePath = "C:\ATM_Security\PloutusDetectionLog.txt"
    $timeStamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timeStamp - $message"
    Add-Content -Path $logFilePath -Value $logMessage
}

# Function to send notifications (example with email)
function Send-Notification {
    param (
        [string]$subject,
        [string]$body
    )
    try {
        # Example email notification (configure SMTP settings as required)
        $smtpServer = "smtp.example.com"
        $smtpFrom = "alert@example.com"
        $smtpTo = "admin@example.com"
        $message = New-Object system.net.mail.mailmessage
        $message.From = $smtpFrom
        $message.To.Add($smtpTo)
        $message.Subject = $subject
        $message.Body = $body
        $smtp = New-Object Net.Mail.SmtpClient($smtpServer)
        $smtp.Send($message)
    } catch {
        Log-DetectionResponse "Error sending notification: $_.Exception.Message"
    }
}

# Main function to detect and respond to Ploutus malware
function Detect-And-Respond {
    Write-Output "Starting detection and response for Ploutus ATM Malware"
    Log-DetectionResponse "Starting detection and response for Ploutus ATM Malware"

    # Consolidate detections
    $detectedFiles = @()
    $detectedProcesses = @()
    $detectedRegistryKeys = @()

    # Check for malicious processes
    foreach ($processName in $maliciousProcesses) {
        $process = Get-Process -Name $processName -ErrorAction SilentlyContinue
        if ($process) {
            $detectedProcesses += $processName
        }
    }

    # Check for malicious files
    foreach ($filePath in $maliciousFiles) {
        if (Test-Path $filePath) {
            $detectedFiles += $filePath
        }
    }

    # Check for malicious file names and hashes
    foreach ($fileName in $maliciousFileNames) {
        $files = Get-ChildItem -Path C:\ -Recurse -Filter $fileName -ErrorAction SilentlyContinue
        foreach ($file in $files) {
            $filePath = $file.FullName
            $fileHash = Get-FileHashSHA256 $filePath
            if ($maliciousSHA256 -contains $fileHash) {
                $detectedFiles += $filePath
            }
        }
    }

    # Check for malicious registry keys
    foreach ($regKey in $maliciousRegistryKeys) {
        if (Test-Path $regKey) {
            $detectedRegistryKeys += $regKey
        }
    }

    # Act on detections
    foreach ($processName in $detectedProcesses) {
        Stop-MaliciousProcess -processName $processName
        Send-Notification "Malicious Process Detected" "Process $processName detected and stopped."
    }

    foreach ($filePath in $detectedFiles) {
        Remove-MaliciousFile -filePath $filePath
        Send-Notification "Malicious File Detected" "File $filePath detected and removed."
    }

    foreach ($regKey in $detectedRegistryKeys) {
        Remove-MaliciousRegistryKey -regKey $regKey
        Send-Notification "Malicious Registry Key Detected" "Registry key $regKey detected and removed."
    }

    Write-Output "Detection and response process completed"
    Log-DetectionResponse "Detection and response process completed"
}

# Execute the detection and response function
Detect-And-Respond
