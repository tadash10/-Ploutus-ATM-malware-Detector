# Filename: DetectAndRespondToPloutus.ps1

# Define known IoCs for Ploutus ATM Malware
$maliciousProcesses = @("Ploutos.exe", "MaliciousProcessName.exe")
$maliciousFiles = @("C:\Windows\System32\ploutus.dll", "C:\ProgramData\malware.exe")
$maliciousRegistryKeys = @("HKLM:\SOFTWARE\MaliciousKey", "HKCU:\Software\MaliciousKey")
$maliciousSHA256 = @("d99339d3dc6891cdd832754c5739640c62cd229c84e04e9e3cad743c6f66b1b9")
$maliciousFileNames = @("Ploutos.exe", "Backdoor.Ploutus.B")

# Function to compute SHA256 hash of a file
function Get-FileHashSHA256 {
    param (
        [string]$filePath
    )
    try {
        if (Test-Path $filePath) {
            $fileStream = [System.IO.File]::OpenRead($filePath)
            $sha256 = [System.Security.Cryptography.SHA256]::Create()
            $hashBytes = $sha256.ComputeHash($fileStream)
            $fileStream.Close()
            return [BitConverter]::ToString($hashBytes) -replace '-', ''
        }
    } catch {
        Log-DetectionResponse "Error computing hash for $filePath: $_.Exception.Message"
    } finally {
        if ($fileStream) { $fileStream.Close() }
    }
    return $null
}

# Function to stop malicious processes
function Stop-MaliciousProcesses {
    $allProcesses = Get-Process -ErrorAction SilentlyContinue
    $maliciousProcessesToStop = $allProcesses | Where-Object { $_.Name -in $maliciousProcesses }
    
    foreach ($process in $maliciousProcessesToStop) {
        try {
            Write-Output "Stopping malicious process: $($process.Name)"
            Stop-Process -Name $process.Name -Force
            Log-DetectionResponse "Stopped malicious process: $($process.Name)"
        } catch {
            Log-DetectionResponse "Error stopping process $($process.Name): $_.Exception.Message"
        }
    }
}

# Function to remove malicious files
function Remove-MaliciousFiles {
    foreach ($filePath in $maliciousFiles) {
        try {
            if (Test-Path $filePath) {
                Write-Output "Removing malicious file: $filePath"
                Remove-Item $filePath -Force
                Log-DetectionResponse "Removed malicious file: $filePath"
            }
        } catch {
            Log-DetectionResponse "Error removing file $filePath: $_.Exception.Message"
        }
    }
}

# Function to detect and remove malicious file names
function Detect-And-RemoveMaliciousFileNames {
    $maliciousFilePaths = @()

    foreach ($fileName in $maliciousFileNames) {
        $files = Get-ChildItem -Path C:\ -Recurse -Filter $fileName -ErrorAction SilentlyContinue
        foreach ($file in $files) {
            $maliciousFilePaths += $file.FullName
        }
    }

    foreach ($filePath in $maliciousFilePaths) {
        try {
            Write-Output "Removing malicious file: $filePath"
            Remove-Item $filePath -Force
            Log-DetectionResponse "Removed malicious file: $filePath"
        } catch {
            Log-DetectionResponse "Error removing file $filePath: $_.Exception.Message"
        }
    }
}

# Function to remove malicious registry keys
function Remove-MaliciousRegistryKeys {
    foreach ($regKey in $maliciousRegistryKeys) {
        try {
            if (Test-Path $regKey) {
                Write-Output "Removing malicious registry key: $regKey"
                Remove-Item $regKey -Recurse -Force
                Log-DetectionResponse "Removed malicious registry key: $regKey"
            }
        } catch {
            Log-DetectionResponse "Error removing registry key $regKey: $_.Exception.Message"
        }
    }
}

# Function to log the detection and response actions
function Log-DetectionResponse {
    param (
        [string]$message
    )
    $logFilePath = "C:\ATM_Security\PloutusDetectionLog.txt"
    $timeStamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timeStamp - $message"
    Add-Content -Path $logFilePath -Value $logMessage
}

# Function to send notifications (example with email)
function Send-Notification {
    param (
        [string]$subject,
        [string]$body
    )
    try {
        # Example email notification (configure SMTP settings as required)
        $smtpServer = "smtp.example.com"
        $smtpFrom = "alert@example.com"
        $smtpTo = "admin@example.com"
        $message = New-Object system.net.mail.mailmessage
        $message.From = $smtpFrom
        $message.To.Add($smtpTo)
        $message.Subject = $subject
        $message.Body = $body
        $smtp = New-Object Net.Mail.SmtpClient($smtpServer)
        # Secure SMTP settings (ensure actual secure settings in production)
        $smtp.EnableSsl = $true
        $smtp.Credentials = New-Object System.Net.NetworkCredential("username", "password")
        $smtp.Send($message)
    } catch {
        Log-DetectionResponse "Error sending notification: $_.Exception.Message"
    }
}

# Main function to detect and respond to Ploutus malware
function Detect-And-Respond {
    Write-Output "Starting detection and response for Ploutus ATM Malware"
    Log-DetectionResponse "Starting detection and response for Ploutus ATM Malware"

    # Check for and stop malicious processes
    Stop-MaliciousProcesses

    # Check for and remove malicious files
    Remove-MaliciousFiles

    # Detect and remove malicious file names
    Detect-And-RemoveMaliciousFileNames

    # Check for and remove malicious registry keys
    Remove-MaliciousRegistryKeys

    # Check for malicious files by hash
    $maliciousFilesByHash = @()
    foreach ($fileName in $maliciousFileNames) {
        $files = Get-ChildItem -Path C:\ -Recurse -Filter $fileName -ErrorAction SilentlyContinue
        foreach ($file in $files) {
            $filePath = $file.FullName
            $fileHash = Get-FileHashSHA256 $filePath
            if ($maliciousSHA256 -contains $fileHash) {
                $maliciousFilesByHash += $filePath
            }
        }
    }

    foreach ($filePath in $maliciousFilesByHash) {
        try {
            Write-Output "Removing malicious file by hash: $filePath"
            Remove-Item $filePath -Force
            Log-DetectionResponse "Removed malicious file by hash: $filePath"
            Send-Notification "Malicious File Detected" "File $filePath with hash $($Get-FileHashSHA256 $filePath) detected and removed."
        } catch {
            Log-DetectionResponse "Error removing file $filePath by hash: $_.Exception.Message"
        }
    }

    Write-Output "Detection and response process completed"
    Log-DetectionResponse "Detection and response process completed"
}

# Execute the detection and response function
Detect-And-Respond
